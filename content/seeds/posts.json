[{"id":"newamerica","type":"project","is_live":true,"name":"New America","title":"New America","headline":"Lead developer for interactive web projects.","url":"http://atlas.newamerica.org","links":[{"name":"Atlas","url":"http://atlas.newamerica.org"},{"name":"2014 Annual Report","url":"http://2014.newamerica.org"},{"name":"My New America","url":"http://my.newamerica.org"}],"group":"featured","dates":["2014-12","present"],"languages":["JavaScript"],"technologies":["React.js","Backbone.js","Marionette.js","d3.js","Leaflet.js","Express.js"],"body_text":"New America is a vibrant think-tank that is very much interested in technology - and as such, deserves the very best in interactive web tools. I currently lead coding efforts and contribute to design and UX to make this happen.\n\nThe beating heart of my work is [Atlas](http://atlas.newamerica.org), a new data visualization and presentation tool. It delivers the Education Policy Program's carefully collected and synthesized data to policymakers, other analysts and the general public in a beautiful, clear, highly interactive format. Its back-end allows policy analysts to create custom interactive maps and charts without coding.\n\nI am using the core codebase from Atlas to develop the [2014 annual report](http://2014.newamerica.org), [the New America intranet](http://my.newamerica.org), while also doing some consultation and front-end bug fixes on the organization's [main site](https://www.newamerica.org/) on the side. These are busy, exciting, fun times with a whole lot of learning.\n\n# Technology\n\nAtlas is a native web/single-page application powered by Express.js. It is very close to becoming a fully isomorphic application, with Backbone.js data models and React.js components shared by the client and the server.\n\nData visualization and interactive mapping components are handled by the very capable d3.js and Leaflet.js. We've figured out some [nice ways](/blog/scaling-tricks-for-geo) to integrate these libraries into our client-side codebase.\n\n# History\n\nThe codebase has come a long way, included a whole lot of fun, learning and intensity. Here are some of the highlights:\n\n## November 2014\n\nWe brainstormed on the scope of the platform and made decisions on the technology stack used for prototyping. Ruby on Rails 4.2, Backbone.js and Marionette.js 2.3 are the winners.\n\n## December 2014\n\nThe home page and the projects listings page is built out as a single-page app using Marionette.js.\n\nAn initial [heatmap](http://atlas.newamerica.org/mapping-college-readiness) and [pindrop](http://atlas.newamerica.org/tech-early-literacy) map templates are built out using vanilla JavaScript modules. The following starts showing up all over the place:\n\n\tvar Atlas.SomeMappingModule = function() {\n\t\t\n\t\tvar self = {};\n\n\t\t// Add event emitting, handling and listening capabilities.\n\t\t_.extend(self, Backbone.Events);\n\n\t\tvar privateMethod = function() {};\n\n\t\tself.listenTo(babyBrother, 'i:m:hungry', function() {});\n\n\t\tself.trigger('real nice');\n\n\t\tself.publicMethod = function() {};\n\n\t\t// Initialize and star the app.\n\t\tself.start = function() {\n\n\t\t};\n\n\t\t// Tear down, clean up event listeners and all dom nodes generated by the module.\n\t\tself.stop = function() {\n\t\t\tself.stopListening();\n\t\t};\n\n\t\treturn self;\n\n\t};\n\n\n\n## February 2015\n\nAll parts of the application enter the framework of Marionette.js modules. The heavily used global messaging system decouples modules further. Development goes on in a comfortable pace.\n\n## May 2015\n\nThe public-facing portion of the site moves to Express.js, while the back-end stays on Rails. This provides a significant performance boost. In preparation for the June launch, the codebase is cleaned, gulped, gzipped, and dreamed about over the course of several days.\n\n## June 2015\n\nThe [first interactive map](http://atlas.newamerica.org/mapping-college-readiness) is shown in public at an event, attended also by Delaware's governor. The site behaves glitch-free, and the program is very happy.\n\nWith time on our hands once more, we think about high-level improvements: isomorphic models would simplify data API code, better SEO is needed, Backbone Views are a pain to work with. Luckily, our competent intern Jessica has been making progress prototyping React.js components for the back-end, an endeavour that encouraged us to finally switch technologies.\n\n## July 2015\n\n75% of the site moves away from Backbone Views to React.js components, keeping Marionette.js' global messaging system.\n\n## August 2015\n\nAll Marionette modules move over to React. We learn an important lesson: React encourages more encapsulation, crystal-clear data flow and simpler messaging patterns than Marionette's modules. This is not to say the same is not possible in Marionette, it's just more tempting to take shortcuts that introduce wild couplings, shortcuts of which we discovered a few. The plan becomes to use Marionette more sparingly and only as a global messaging system.\n\nThere is another lesson another step further back: updating technologies - especially to the ones we like - does wonders to code quality. Feeling motivated to keep doing that as frequently as possible.\n\n## September 2015\n\nThe codebase is moved to ES6 code, bundled with Browserify and accessed in a single entry point on the client.\n\nThe back-end is revamped using custom, reusable React form components. Things start to resemble an extractable, single-page CMS."},{"id":"ripsaw-js","type":"project","title":"ripsaw.js","is_live":true,"dates":["2013-11","present"],"name":"ripsaw.js","group":"featured","headline":"Open-source library for guided, interactive product design on HTML5 Canvas.","links":[{"name":"Website","url":"http://pickled-plugins.github.io/ripsaw-js/"},{"name":"Source Code","url":"http://github.com/pickled-plugins/ripsaw-js"}],"supervisors":[],"collaborators":[],"technologies":["HTML Canvas"],"body_text":"Walking around in Fishs Eddy - a kitchenware store in Manhattan - on a November evening in\n2013, I was struck by a thought: what if I tried to create an app that allows everybody, regardless of their background, to interactively manipulate and customize their own utensils, shelves, jewelry, and receive them 3d printed in the mail?\n\n[ripsaw.js](http://pickled-plugins.github.io/ripsaw-js/) was born as a result of this effort."},{"id":"giraffe-for-rhino","type":"project","is_live":true,"dates":["2014-04","2014-07"],"name":"Giraffe for Rhino","title":"Giraffe for Rhino","group":"recent","headline":"A Structural Engineering Plug-in for CAD package Rhinoceros 3D.","links":[{"name":"Website","url":"http://pickled-plugins.github.io/Giraffe-for-Rhino/"}],"year":2010,"supervisors":["Michael Stein, PE"],"collaborators":[],"technologies":["Rhino PythonScript"],"body_text":"Giraffe became the most rounded of my software efforts that aimed to streamline architectural and structural design processes in the majorly hectic world of large-scale constructions. It is a plug-in that organizes and stores complex design geometries in a master-model inside Rhinoceros 3d (one of the best 3d modelers in wide use by architects today) and exports seamlessly to the somewhat sad world of structural engineering software stuck in the 70's. To illustrate the sadness, it will suffice to say that one of the world-leading such software packages, SOFiSTiK, builds up its models in Fortran, which I used extensively in the year 2014. \n\nLuckily, Giraffe did much of the heavy lifting once it was created. It served bravely during the preliminary design of the [Hudson Yards skyscrapers'](https://en.wikipedia.org/wiki/Hudson_Yards_Redevelopment_Project) specialty facades at Schlaich Bergermann and Partner LP, allowing for design modeling up to three times faster. Also less error-prone. And happier."},{"id":"pendant-project","type":"project","is_live":true,"group":"recent","dates":["2013-01","2013-04"],"name":"Pendant Project","title":"The Pendant Project","headline":"Jewelry design exercise within a set frame.","year":2010,"supervisors":[],"collaborators":["Tiffany Cheezem","Greta Shum","Alison Cook"],"body_text":"[The Pendant Project](https://www.etsy.com/shop/dchisel) is my very first purely creative project that came completely spontaneously and that I could not get out of my mind for months. For such an organic project yielding 32 fairly quirky necklace designs, it is tricky to extract a theme or design direction, but I tried nonetheless:\n\n> It is a design exercise that encourages a lively and expressive interaction between artwork and its frame, one that can be perceived as tension, play, harmony or competition for the viewer’s attention.\n\nHere is my personal favorite starring in a promotional video:\n\n<iframe src=\"https://www.youtube.com/embed/0bKI3VSdD1g\" frameborder=\"0\" allowfullscreen></iframe>\n\nWhile most of the designs are mine, my friends picked up on this idea and gave me directions. Big thanks and shouts out to Tiffany Cheezem, Greta Shum and Alison Cook."},{"id":"pba","type":"project","is_live":true,"name":"PBA","dates":["2005"],"group":"nostalgia","title":"Pascal Basketball Association","headline":"Our first ever computer game.","links":[{"name":"Play PBA","url":"http://pickled-plugins.github.io/pba/"},{"name":"View Code","url":"https://github.com/pickled-plugins/pba"}],"collaborators":["Tamás Plugor","Tamás Gajdó"],"order":1,"languages":["Borland Pascal","Processing"],"body_text":"On a cloudy afternoon during our freshman year of high school, I and two good friends, Tamás Plugor and Tamás Gajdó, sat down to blend together our love for basketball with our love for code and graphics. In a couple of hours, we wrote the bulk of our first presentable game: PBA, or Pascal Basketball Association.\n\nThere is a solid piece of personal history in this project. [Borland Pascal](https://en.wikipedia.org/wiki/Turbo_Pascal) - hence the name of the game - was the programming language in which I wrote my first sorting algorithm (the first double for loop was in C++ a couple of years before), first linked lists, graphs, trees and backtracking algorithms. The most memorable ones, though, were the graphics experiments: particle-springs animations, light rays bouncing around a random arrangement of mirrors, a kaleidoscope and many many fractals. Still, even out of these, dearest to my heart is PBA. There was something coding it in a small team and sharing it with the entire class that made it special.\n\nAnd so, to satisfy my nostalgic nature, I reconstructed the game in Processing, true to its original looks (though without a menu, name prompt and the high score registry). Through Processing.js, it is now available in the browser. [Ready for that unforgiving hoop](http://pickled-plugins.github.io/pba/)?"},{"id":"kinetic","type":"project","name":"kinetic","group":"recent","title":"Deployable Smart Mast","headline":"Algorithmic design for architecture.","year":2010,"links":[{"name":"Journal publication","url":"http://onlinelibrary.wiley.com/doi/10.1111/mice.12013/abstract"},{"name":"Demo Video","url":"https://www.youtube.com/embed/BjMAruO2SGA"}],"dates":["2010-11","2011-04"],"supervisors":["Prof. Sigrid Adriaenssens","Prof. Branko Glisic"],"collaborators":[],"order":1,"is_live":true,"languages":["MatLab","Visual Basic"],"body_text":"The Deployable Smart Mast was my first really serious and really fun college research project on the intersection of code, mechanics and geometry.\n\nThe mast was built as proof of concept for a structure that adapts its shape based on outside weather conditions, an idea explored under Prof. Sigrid Adriaenssens and Prof. Branko Glisic at Princeton. The acrylic prototype was equipped with a number of heat sensors along its height, and if any of them was triggered, a linear actuator changed the mast's height to stay clear of danger.\n\n<iframe src=\"https://www.youtube.com/embed/BjMAruO2SGA\" frameborder=\"0\" allowfullscreen></iframe>\n\nI was responsible for the conceptual design of the 3d geometry, as well as programming the motion control of the structure based on the sensors' input. A couple of late nights later, we had something to show, after which came the fun part:\n\nThe prototype was demoed to middle school students in New Jersey in the fall of 2010. The students interacted with the prototype, making it lower to a certain height by applying hot air using a blowdrier. At the same time, the a computer screen displayed the current and target geometries of the tower. Humans, computer and prototype all interacted by responding to and validating each others’ actions.\n\nThe project got published in [Engineering Structures](http://onlinelibrary.wiley.com/doi/10.1111/mice.12013/abstract).\n\nInspired by this project, I conducted a parametric exploration of pantograph shapes, from wireframe design to physical prototypes and fabrication methods.\n\n![Variations](/images/projects/kinetic/variations.svg)"},{"id":"battle","type":"project","name":"battle","dates":["2012-03","2012-05"],"title":"Battle Shell","headline":"Algorithmic design in architecture: software design and execution, structural design.","group":"recent","supervisors":["Prof. Sigrid Adriaenssens"],"collaborators":["Laura Ettedgui","Julianne Gola"],"order":1,"is_live":true,"languages":["Visual Basic"],"body_text":"A collaboration with architecture students Laura Ettedgui and Julianne Gola at Princeton University under the guidance of Prof. Sigrid Adriaenssens, the Battle Shell gave me an interesting opportunity to work at the intersection of software, structural mechanics and architectural design.\n\n![Battle Shell Rendering 1](/images/projects/battle/battle-render-1.png)\n\n# Architectural Brief\n\nThe [Miami Marine Stadium](https://en.wikipedia.org/wiki/Miami_Marine_Stadium) has recently been appropriated by graffiti artists, to whom no surface is off-limits. Rather than see this as dereliction, we see this as a sign of the youthfulness and desire for expression that is now embedded in the character of the stadium. We hope to incorporate this energy into the stadium’s future. Rather than build a platform for teens to watch their idols perform, we propose the Miami Marine Stadium as a place for teens to take the stage. The ‘battle’ is a type of performance specific to the performing arts of contemporary youth culture. Though difficult to stage in typical performance spaces, the battle scenario will be spatially accommodated by proposed split bandshell stages, with the possibility to combine into a larger, single stage for more traditional events.\n\n![Battle Shell Rendering 2](/images/projects/battle/battle-render-2.png)\n\n![](/images/projects/battle/battle-top.png)\n\n# Design Process\n\nFor the project, I've used my particle-springs algorithm implemented in Visual Basic to generate a unit in a shape of a eighth of a sphere. The algorithm was adjusted to provide a shape that combines smoothly with its symmetric twin sibling, such they can come together to form a large, unified roof surface (see plan drawing). Here it is hard at work:\n\n![Battle Shell Form-Finding](/images/projects/battle/battle-shell.svg)\n\nAlthough the shape has an organic feel, it does not result from a particle-spring equilibrium - the simulation is stopped about three quarters of the way, trading off its structural efficiency with many other architectural requirements.\n\nSoftware evolved along with the project - as deemed necessary by its complexity."},{"id":"minimal-chess","type":"project","is_live":false,"name":"minimal chess","title":"Minimalistic Chess Board","dates":["2013-01"],"body_text":"A highly minimalistic look at the chess set.\n\nSeeing the elaboration of chess set designs over centuries and cultures, I've decided to take a minimalistic look at it.\n\nI knew I wanted to go 2d first, so that. \n\nI also got interested in redefining the roles of the figures by assigning them shoes. This highlighted different characteristics of the players: modern, formal elegance instead of royal might for the king, strength, status and feminine for the queen, a detachment of the knight's horse from its rider. The pawns \n\nDiscrete hatches distinguish between the two sides.\n\nThe set was hand-drawn, digitally reworked, then lasercut. Playing with it can be confusing."},{"id":"algorithmic-tattoo","type":"project","is_live":true,"name":"algorithmic tattoo","group":"recent","title":"Algorithmic Tattoo","headline":"Body Art from the Creative Programmer","dates":["2014-11-25"],"body_text":"![Tattoo Image](/images/projects/algorithmic-tattoo.svg)\n\nThis simple, highly mathematical shape took a curious journey starting at a solution to a geometry problem, through the drawings of a shelf design, all the way to becoming first a logo, then an ink drawing on my upper back. Here is its story.\n\nIt is derived from a [City Voronoi diagram](https://en.wikipedia.org/wiki/Voronoi_diagram#Illustration), vaguely defined as follows. If we look at a map of a city with post offices, the Voronoi algorithm splits up the city into regions around individual offices. Anywhere you may find yourself in the city, the region you are in will tell you which post office is the closest. A simple Voronoi diagram does this by linear (airline) distance and yields a dragonflywing-like mesh that I never found particularly appealing. However, if one is only allowed to move in north-south and east-west directions such as in Manhattan, the subdivisions take a much more interesting shape. Better yet, it can be customized by moving just a couple of points around, with the algorithm handling the rest. I have experimented with this idea in my [ripsaw.js](http://pickled-plugins.github.io/ripsaw-demo/#pages/home) project, and that is where the shape comes from - it was intended to become a shelf, taking the form of a tattoo later on.\n\nCity Voronoi diagrams have always made me feel a hint of anxiety, as symbols of highly optimized and efficient existence where everything revolves around linear efficiency in time and money. Paths are not chosen by intuition or emotions, but by algorithms solving highly rational problems. The former are therefore suppressed.\n\nThis closed shape and mindset set the starting point of the design process. Once I arrived at a particular closed shape I like, I start removing links from it. It is a very liberating process to break the closed grid and allow for gaps and displacement that I perceive as hints of spontaneity, freedom of movement and thought. To emphasize the idea of transformation, there is a shape in the image that kind of resembles a person in fetal position. This feature was not intended, but came about by chance through the algorithm.\n\nThe tattoo was completed in November 2015 in Brooklyn, New York, after I have lived through my personal story of liberation which resembles the design process itself."},{"id":"dchisel","type":"project","name":"dchisel.com","group":"archive","title":"dchisel.com","headline":"First custom-built portfolio site","url":"http://dchisel.herokuapp.com/","year":2013,"categories":["code","design"],"is_live":false,"technologies":["Raw PHP","jQuery"],"body_text":"dchisel.com was my first custom-built website that got me started on the HTML-CSS-JavaScript-jQuery wagon, with a little PHP on the side."},{"id":"scaling-tricks-for-geo","type":"blog","dates":["2015-06-15"],"group":"technical","links":[{"name":"Demo","url":"http://pickled-plugins.github.io/scaling-tricks-for-geo"}],"name":"Scaling Tricks for Geo","title":"On Scalable Interactive Mapping","headline":"Recent Favorite Tricks","is_live":true,"technologies":["Backbone.js","Marionette.js","d3.js","Leaflet.js"],"body_text":"I spent some time thinking up some tricks that made my recent interactive mapping code less bulky, more modular, and all in all more fun to write and maintain. Finally, I extracted and collected them into this blog post. For those of you looking to see live, breathing code, this [demo project](https://github.com/pickled-plugins/scaling-tricks-for-geo) sums things up in a somewhat unpolished nutshell. Otherwise, help yourselves right below for a couple of ideas on the following topics:\n* a focused look at interactive data visualizations within larger front-end architectures.\n* a smarter flavor of geodata that reintroduces featureful data models inside interactive map views.\n* a scetch of a visualization lifecycle that works the same way for various forms of displayable data, whether they need additional shape files loaded or not.\n* a structure for rendering code that works with all of the above.\n\nThe technology stack: [d3.js](http://d3js.org/) render using [Backbone.js](http://backbonejs.org/) data models, carried over into [GeoJSON](http://geojson.org/) format. That said, the ideas and code samples from this post may work well with other MV* frameworks or in [React](http://facebook.github.io/react/) apps, and especially as lightweight helpers if you don't use a framework at all. In fact, the [project](http://atlas.newamerica.org) that first used patterns from this blog post is in transition to React, so there is a good chance I may follow up with specifics.\n\nAll that put aside for a split second, though, I just want to say that I am really excited to do a technical blog for the very first time. I hope you enjoy!\n\n# Interactive GeoData Visualizations within Client-side Apps\n\nOn the combined use of ``Backbone.js``, a minimalistic MV* framework and ``d3.js``, the most popular data visualization library, Shirley Wu said the following: \"Yup, I totally agree, it's really not that difficult. But what I do think is challenging (and interesting), is to use them together well\". I resonated not only with her statement, but with her code examples she presented [on Backbone Conf III 2014](https://www.youtube.com/watch?v=TqXD0_tGPv8&list=PLlgxAbM67lYIGw8DnANC7VgREbzJRQged&index=7). I think they did a really good job ironing out the differences in which object-oriented Backbone views and functional d3 rendering workflows can be blended together. In an ever-so-slightly different flavor, these ideas found their way into my work as well.\n\nThings got yet more interesting when I turned to using ``d3`` for geomapping applications within a larger MV* app. The prominent data structure for mapping, GeoJSON (or TopoJson, which becomes GeoJSON inside the app anyway), looks quite a bit different than a Backbone model or collection. It has custom [format](http://geojson.org/), may weight hundreds of kilobytes, and tends to not be available with uploaded spreadsheet data that I was mapping, requiring an additional ajax call and further joining/processing. Working with it took some time to get accustomed to, and here is an approach that worked well for me.\n\n# The Data Side: GeoJSON, Enriched\n\n## A Short-lived Misconception of Rigid Geodata\n\nIn several MV* frameworks, models are available in the views with all their convenience methods. ``this.model.getSummary()``, ``@resource.aggregate()`` show up in view code across languages and frameworks for our enjoyment and convenience. When I started out rendering GeoJSON-based data, I thought I had to abandon this luxury for seemingly rigid, static constructs like the following:\n\n\tgeoJson = {\n\t\ttype: 'FeatureCollection',\n\t\tfeatures: [\n\t\t\t{\n\t\t\t\ttype: 'Point',\n\t\t\t\tgeometry: { /* geometry here */ },\n\t\t\t\tproperties: { /* static data here. wait - static only? */ },\n\t\t\t\tid: 1 /* maybe I can join to models in outside collections every time I need to? */\n\t\t\t}\n\t\t]\n\t}\n\nSeeing my data buried into a set data structure, lacking model instance methods or template helpers I've been using extensively made me think that I had to say goodbye to the [Rails-like, playful comfort](https://signalvnoise.com/posts/3873-programming-with-toys-and-magic-should-be-relished-not-scorned) of my prior MV* work. But this really does not have to happen.\n\nMy initial take was to examine the feature object for an ``id`` or any other property I could use to link to an outside, comprehensive data model, keeping my good old collection separate from the GeoJSON. But I knew I could swim against the current less. Turns out, if I passed a GeoJSON file over to a ``d3`` rendering module with rich, logic-packed Backbone models smuggled into its feature collection, I would get no complaints. Here is what I ended up with:\n\n\tfeatures: [\n\t\t{\n\t\t\t_model: /* a freshly added, or injected, Backbone model instance */,\n\t\t\ttype: 'Point',\n\t\t\tgeometry: { /* geometry here */ },\n\t\t\tproperties: { /* this we don't even need from this point on */ }\n\t\t}\n\t]\n\nIf we look at a sample rendering code, we see how easily we retrieve these references when setting properties and event handlers, a feature I was so used to and so reluctant to abandon.\n\n\td3.selectAll('path')\n\t\t.data(geoJson.features)\n\t\t.enter()\n\t\t.append('path')\n\t\t// insert code here that assigns 'd' attributes on the path based on feature geometry data\n\t\t.attr('class', function(feature) {\n\t\t\tvar model = feature._model;\n\t\t\t/* Hello, model! */\n\t\t})\n\t\t.on('click', function(feature) {\n\t\t\tvar model = feature._model;\n\t\t\t/* And hello again! */\n\t\t});\n\nTo facilitate smuggling, or more formally, injecting model references into a GeoJSON object, I wrote a constructor that generates GeoJSON-like objects directly passable to d3 for rendering, along with some mixins and convenience methods for building, extending or converting static data into the above format. I named this constructor ``stg.RichGeoJSON()`` (mind the ``stg``, or scaling tricks for geo namespace), referenced in the test project and in the post from this point on.\n\nI was very excited to find that ``d3`` is so welcoming to smarter objects like this, so I went ahead and enhanced them some more. Could a build-in event system be useful? Anything else? Let's find out.\n\n### The Self-sufficient GeoModel\n\nLet's think through the process of mapping some datasets with some ``new stg.RichGeoJSON()``'s. First up:\n\n\tcollectionData = [\n\t\t{ name: 'pin one', size: 2, latitude: 37, longitude: 78 },\n\t\t{ name: 'pin two', size: 1, latitude: 37.1, longitude: 77 },\n\t\t{ name: 'pin three', size: 6, latitude: 37.3, longitude: 72 }\n\t];\n\nI would personally make the inner objects into Backbone models, squeeze the latitudes/longitudes into arrays to populate each GeoJSON feature's ``geometry`` field, add a model reference to the feature under the ``_model`` key, build all features up into a GeoJSON, and ship it off to ``d3`` for rendering (scroll down for more on that). The ``stg.RichGeoJSON`` constructor even provides a method to do this automatically with some room for customization:\n\n\t// stg.Pins extends from Backbone.Collection\n\tcollection = new stg.Pins(collectionData);\n\n\trichGeoJson = new stg.RichGeoJSON();\n\t// the second argument provides possible keys where geodata may be found\n\trichGeoJson.buildFromLatLongCollection(collection, {\n\t\tlatKeys: [ 'lat', 'latitude', 'Lat' ],\n\t\tlongKeys: [ 'long', 'longitude', 'Long' ]\n\t});\n\t// proceed to rendering\n\nAs a bonus feature, I added support for messy, inconsistent data that may contain latitude and longitude values under different keys. This allowed me to work with data that has inconsistent format without the need to reconfigure parsing methods each time.\n\nLeaving it at that for now, our next dataset looks like this:\n\n\t// 2013 population data taken from Wikipedia for demonstration purposes.\n\tstatesData = [\n\t\t{ name: 'Nebraska', population: 1868516, region: 'Midwest' },\n\t\t{ name: 'Arizona', population: 6626624, region: 'Southwest' }\n\t];\n\nAfter we've made this into a Backbone Collection and realized we're dealing with states (a check my collection does with a typechecker module, not discussed in this post), we can load in our trusted ``us-states.geo.json`` with ``jQuery``'s or ``d3``'s ajax helpers, make it into RichGeoJSON instance, use its helpers to blend in the models of our collection into the features, and our data is ready for rendering once more:\n\t\n\t// stg.States extends from Backbone.Collection\n\tstates = new stg.States(states);\n\n\t$.get('data/us-states.geo.json', function(data) {\n\t\tvar richGeoJson = new stg.RichGeoJSON(data);\n\t\t// join by name\n\t\trichGeoJson.injectCollection(states, 'name', injectOptions);\n\t\t// proceed to rendering\n\t});\n\nThe ``injectOptions`` specifies additional options that can be used to match models with GeoJSON features. It is not currently implemented in the example, but it is definitely something I'd like to explore in detail in a later discussion. Some features it could include:\n* case-sensitivity.\n* the number of characters that can be extra or off (a collection item with ``name: 'new\\tjerseyx'`` could still be matched with a feature with ``name: 'New Jersey'``).\n* backup join keys. If there is no name field match, maybe there is a ``'state'``, or we can try our luck with an ``'id'``.\n* an entirely custom, project-specific join function, taking a model and a feature as parameters, and returning a boolean telling us whether they match.\n\n``#injectCollections()`` would then return join statistics such as how many collection items could be injected, if there were several that could have been injected into the same GeoJSON feature, and so on (feature not yet implemented in the test project). Join options, back up keys and join strictness could then be refined based on the feedback from any previous attempt, even to a certain degree of automation. This workflow is sketched out in comments for now, and I welcome further ideas and code contribution to finish it up.\n\nThis approach works well for apps where multiple data formats need to be supported (inconsistent data, user input). An alternate approach would be to format the data to make the join logic more universal. After [Tom MacWright](http://www.macwright.org/about/) kindly devoted some of his time to review this post, he suggested the following syntax:\n\n\tstatesData = [\n\t\t{ \n\t\t\tname: 'Nebraska', \n\t\t\tpopulation: 1868516, \n\t\t\tregion: 'Midwest',\n\t\t\tgeometry: {\n\t\t\t\ttype: 'Join',\n\t\t\t\tid: 'Nebraska',\n\t\t\t\tcollection: 'states'\n\t\t\t}\n\t\t},\n\t\t{ \n\t\t\tname: 'Arizona', \n\t\t\tpopulation: 6626624, \n\t\t\tregion: 'Southwest',\n\t\t\tgeometry: {\n\t\t\t\ttype: 'Join',\n\t\t\t\tid: 'Arizona',\n\t\t\t\tcollection: 'states'\n\t\t\t}\n\t\t}\n\t];\n\nBy formatting data this way, either the ``#injectCollections()`` method becomes much simpler to facilitate building a separate ``RichGeoJson`` instance, or, since this is already starting to look like a GeoFeature, shape data may end up right inside the collection data.\n\n## Sync and Async GeoJSON in the Same App\n\nThe above implementations for the US states visualization and the map pins one look a bit different. The latter is synchronous and yields ``richGeoJSON`` immediately, while the former may keep a spinner icon waiting through a two-second server lag before it retrieves the shape data and carries on with the rendering. I am not very happy keeping these different implementations in mind, adding rendering logic in different places, one roaming free and the other buried inside an ajax callback. I settled with writing asynchronous(-looking) code whether I needed it or not, as follows:\n\n\tvar richGeoJson = new stg.RichGeoJSON();\n\t// set callback to execute when object is ready\n\trichGeoJson.onReady(function() {\n\t\t// call rendering module with rich data\n\t});\n\t// construct richGeoJson here, whether through build-from-lat-long or ajax-fetch-and-inject\n\t// onReady called automatically when things are ready.\n\nThe ``richGeoJson`` instance will remember to execute its ``onReady`` method after either a build or an inject is complete, at which point we have all we need to send our logic-packed shapes over to rendering. I found this code to be more readable and uniform, making my app behave the same for whatever data that rolled in. In the end, I managed to share a fair amount of code between rendering ready-available latitude-longitude points or shape files. Rendering \n\n# The View Side\n\nThe data- and model-related implementations above centered around polymorphism, and view-related ones did the same. From my very first experiences tinkering with d3 code, I had a hard time keeping my code clean, and generally felt sceptical that most d3 code examples available online, with all their nesting and lack of high-level clarity, could scale (in saying so, I do not mean to imply that these insightful pieces of code failed at their intended purpose).\n\nAt this point, I really got used to Backbone views, and so, inspired by Shirley's code examples, I ended up splitting up my d3 code into methods of a custom view object - methods that copy a Backbone view's API and thus behave like any other view my app uses.\n\n\t/* \n\t *  Extend from Marionette.js' Object constructor to have access to an event system\n\t *  and an initialize method.\n\t */ \n\tstg.GeoView = Marionette.Object.extend({\n\n\t\t/*\n\t     * Backbone's initializer called when an instance is created.\n\t     * Sets container and data.\n\t     */ \n\t\tinitialize: function(options) {},\n\n\t\t/*\n\t     * Render visualization, set attributes and event listeners.\n\t     * Called only when the data changes.\n\t     */ \n\t\trender: function() {},\n\n\t\t/*\n\t     * Render the visualizations svg container and an inside group. \n\t     * Store these on the instance.\n\t     */ \n\t\trenderSvgContainer: function() {},\n\n\t\t/*\n\t     * Set or update attributes. Called within render, and as a lightweight update method\n\t     *   when the data doesn't change, but its presentation does (e.g. when a map is recolored).\n\t     */\n\t\tsetAttributes: function() {},\n\n\t\t/*\n\t     * Get class name for a feature. \n\t     * Use _model references to have access to attributes and instance methods.\n\t     */\n\t\tgetFeatureClass: function(feature) {},\n\n\t\t/*\n\t     * Destroys view by unbinding event listeners and removing dom elements.\n\t     */\n\t\tdestroy: function() {}\n\n\t});\n\nFor those of you familiar with the [BackboneD3View](https://github.com/akre54/Backbone.D3View) project, you may notice the many similarities. This time, I simply opted for a more simplistic solution, lightly built from scratch.\n\n# All Together\n\nPutting all the pieces together, here is how a map pin visualization could look like:\n\n\t(function(data) {\n\n\t\tvar mapItems = new Backbone.Collection(data);\n\n\t\tvar richGeoJson = new stg.RichGeoJson();\n\n\t\trichGeoJson.onReady(function() {\n\t\t\tnew stg.GeoView({ \n\t\t\t\tel: '.viz', \n\t\t\t\trichGeoJson: richGeoJson \n\t\t\t}).render();\n\t\t});\n\n\t\trichGeoJson.buildFromLatLongCollection(mapItems);\n\n\t}());\n\nNote that this is by no means polished code. On actual applications, I moved all logic generating ``richGeoJson`` into an instance method on the collection. Generating the view ended up in a controller module. The API changed a little bit to conform to make things more consistent across a larger codebase. My goal here is not to present a library, perhaps just a few ideas on how one could be created, if a formalized version makes sense for your project. In this example, extending the view from a handy, well-documented base class would undoubtedly make things a bit more clear. This could become an open-source miniproject, and if you're interested in having it around, please let me know.\n\n# So, Worth it?\n\nI think so. From personal experience, these tricks do give some organizational and semantic clarity, more code reuse and more flexibility to implement new features. What do you think? Care to do me a favor and head over to [GitHub](https://github.com/pickled-plugins/scaling-tricks-for-geo/issues) and write down some thoughts?\n\nOtherwise, or until then, happy mapping!"},{"id":"about","type":"page","title":"Hi","group":"personal","name":"about me","is_live":false,"body_text":"This is Peter, web developer, designer, (natural) language enthusiast, yogi, cook. An all-in-all friendly, enthusiastic fellow with eager-to-pedal feet, a green thumb and a curious mind.\n\nI develop sites and apps - the full-stack thereof - though my strengths and heart lie in clean, well-factored user interfaces and beautiful, elaborate graphics. I work with and get inspiration from the following technologies: React.js, Backbone.js, Marionette.js, d3.js, three.js, leaflet.js and Sass on the front-end, and Node.js, Express.js as well as Ruby on Rails behind the scenes.\n\nI am also quite interested in coding outside of the browser, from architectural and jewelry design to natural language processing, animation and computational art. A fresh idea on how to freshen up a codebase often comes from the outside.\n\nAlso, I teach! From helping a friend through the (insanely hard) Romanian mathematics baccalaureat through high-school English, pre-med Physics, digital fabrication and finally mentoring a web developer intern, I take enjoyment in communicating, explaining and listening, and most importantly, igniting excitement both around and within me.\n\nYou can find me on my bike on the streets of DC, its hip spots such as Compass Coffee or Slipstream, as well as on [GitHub](https://github.com/pickled-plugins), [LinkedIn](https://www.linkedin.com/in/peterszerzo), [YouTube](http://www.youtube.com/user/szerzo1), [Couchsurfing](https://www.couchsurfing.com/people/mighty-comfortable) and [SoundCloud](https://soundcloud.com/bbo-listen). Let's talk!"},{"id":"on-deleting-my-facebook","type":"blog_post","title":"On Deleting my Facebook","headline":"Reflections on a Juvenile Stunt","name":"On Deleting my Facebook","is_draft":true,"group":"personal","is_live":true,"body_text":"We often look back at things we wrote in the past with a slight uneasy feeling. It could be an opinion we don't agree with anymore, a paragraph exposing stronger versions of the shortcomings we're still working on, thoughts we would rather hide from others or at least rewrite/explain before sharing. It could also be something we just never really meant.\n\nMy Facebook post that rolled out in the sunny Sunday afternoon of February 23rd, 2014 could be one of these today:\n\n> Dear Friends,\n>\n> I am deactivating my Facebook account in the coming days. It is finally time to break free of all the clutter it comes with. Also time to keep communication genuine and meaningful.\n>\n> My Gmail, Skype, Etsy store and website (etsy.com/shop/dchisel and dchisel.com) will obviously remain live. Stay in touch there!\n>\n> Cheers,\n>\n> Peter\n\nFor the most part, though, it isn't. True, it is only a stretch of 18 months that stand between the fellow who wrote the Facebook post and the voice you are reading now, but that gap happened to include a quarter crisis, a bald, successful and liberating career change and a thorough introduction into mindfulness and meditation practices. With a risk of making a claim that I myself will disagree with in the future, I have learned many of the most important lessons of my life.\n\nYet the comments I have on my last Facebook post would only point to the need for a tad bit more stylistic polish and a tad fewer strong words (also, dchisel.com isn't live anymore, though it was a cute site in its days). Other than that, the content is still very much agreeable to me, though it is best understood with some context and reflection. Time to get to that now.\n\nRight after I made the post live from the 24th floor of a Manhattan high-rise I used to work in during the week and tutor in on the weekends, I hopped on the subway to ride home to Bushwick, Brooklyn. I didn't expect to get much of a reaction (I have never been very active on Facebook), and sure enough, after an hour underground without cellular data, all I got was a handful of messages from people jokingly disappointed that they won't have a way to stay in touch with me anymore ('Good job, 21st century', I said to myself). Two days later, I deactivated, and didn't log back on again until I decided to fully delete my account at one point in early 2015.\n\nA close friend deactivated a couple of months after I did, and the fact that my act served as encouragement for hers was just about the most positive reaction I got. Among the rest was some whispered praise, a lot of lifted eyebrows, and some outloud ridicule. The only rational response came from my mother as I insisted on waiting to somehow get the e-mail address of my brother's former high school classmate who could advise me on foreign tax matters. \"I know it's against your principles, but..\", she said disappointedly over the phone. What followed was that I should get on Facebook, because that is the only way to reach him. I later found out that he in fact does not check his Facebook, and happily replied to the e-mail after two hours.\n\nThere was something really interesting about all these reactions: the praise was often expressed in silence, and the ridicule I got was usually followed up with apologies and corrections. Here are a couple of remarks, reconstructed for the sake of atmosphere:\n\n> Just suck it up and use Facebook.\n\n> Seriously, good for you. I don't know how you do it, though.\n\n> You're not missing much. I wish I could do it.\n\n> Well, I only meant to rip on people who deactivate their accounts with an oh-so-wise farewell message and silently come back after three weeks. What you did was legit.\n\nGazing over this compilation leaves me with a strong sense of confusion. Don't we have some seriously mixed feelings about the platform?\n\nSimilar mixed feelings extend to among journalists who write on the 'Facebook, good or bad?' topic (though I didn't find anything good other than Facebook's own evaluation). Several, such as this [Huffington Post Article](http://www.huffingtonpost.com/2014/07/17/facebook-study_n_5595890.html), [The New Yorker](http://www.newyorker.com/tech/elements/how-facebook-makes-us-unhappy), [Huffington again](http://www.huffingtonpost.com/2013/01/22/facebook-study-envy_n_2526549.html) or [Facebook's own study](http://www.huffingtonpost.com/2014/06/29/facebook-experiment-psychological_n_5540018.html) voiced adverse mental health effects that stem from lack of purpose, envy triggered by other people's flawlessly pictured lives, comparing, out- and overdoing and then comparing again. Myself, many of my close friends (I mean, friends), and surely many many others were aware of these adverse effects of the Facebook experience. What I also knew was that such arguments tend to not stand a chance against our fundamental desire to fit in go with the crowd, explaining why people will keep posting, liking and poking whether it is good or bad for their emotional well-being. Going against this is a rare game to be played.\n\n[One Atlantic article](http://www.theatlantic.com/health/archive/2015/04/ways-to-use-facebook-without-feeling-depressed/389916/) finally offered a more positive voice on Facebook, focusing on its healthy use instead of lamenting on the apparently inevitable unhealthy one. If we use Facebook healthily, we may break free from adverse effects, even if the interviewer and interviewee of the article spoke hesitantly about the extent to which this is possible. Supposing that it is, then mustering the willpower to not compare ourselves to others would, as the article suggests, free us from negative emotions. Sure, we'd still have to deal with other bad addictions such as the ones to like maximization or stalking, but it's a start. If I let my optimistic nature be in charge for a bit, I may even feel that deleting the account is an overkill.\n\nLuckily for me, I am also a realist. I still vividly remember the restless, achy, sometimes nauseous feeling in my head and stomach after being on Facebook too much, believing consciously or subconsciously the overly positive representations or misrepresentations of people's lives, or getting dozens of birthday wishes from people who only occasionally say hi to me on the streets. Forcing an optimistic thinking onto myself in this case would be hypocrisy. The line of thought ultimately let me to the following conclusion: whoever deletes their account should really just admit to weak willpower. Sigh. Well, here we go:\n\n> My name is Peter, I am 25 years old, and I have weak willpower.\n\nI have to say, this confession was way easier than I had thought. It gets even easier as I look at all the psychological research and [self-improvement websites](http://fiercegentleman.com/science-of-behavior-change/) backing me up. All of a sudden, I feel more companionship and validation than what I got from hundreds of Facebook friends back in the day.\n\nAbout a year ago, I decided to quit alcohol and processed sugar (which, along with quitting Facebook, seems like the recipe for immortality), and I stuck to it with occasional exceptions while traveling. However, according to my stance on Facebook, I possess just about as much willpower than my roommate's pitbull (you should see her trying to abstain from peanut butter). It took me time and intense bursts of frustration, but I am finally ok with it. I also know that embracing it will do me a whole lot of good in the future.\n\nI certainly agree with all the voices out there saying that Facebook isn't bad, and if we use it right, we should be fine. But I also look more closely to the idea of using it right, the difficulty of which seems vastly overlooked. It includes not doing a whole lot of things the platform encourages us to do by its design. The lack of focus when it comes to content and the encouragement to make as many friends as possible (more is better, right?) are two aspects that I believe create the Facebook experience that I walked away from, while staying on all other online platforms that had profiles and friend relationships. Maybe I have weaker willpower than others, and maybe browsing Facebook impacts my possibly rare personality type more negatively. Or perhaps it is the case that many others would also walk away from Facebook (don't we hear that yearning a lot?) if not for a couple of reasons:\n\n* if they could only make the confession I made above (which is really easy and liberating).\n* if they were not concerned about losing touch with other people (especially since the only alternative to Facebook is the rather sassy and unreliable messenger pigeon).\n* if their group, school, club etc. didn't use it as sole means of communication (which is such a good choice of platform that I am sending out honorary medals for it as we speak).\n* if they were willing to give up the convenience of its messaging system (certainly more important than mental health).\n\nGiven this amazing web and mobile technology on our hands today - with many of the coolest innovations being developed among Facebook's own developer teams - such reasons still have the power to keep us pursuing recreational experiences that don't make us feel good. Sad and depressing as this sounds, there is also something really great about it. What mixed, conflicting feelings around Facebook use indicate to me is that we are mere social media adolescents. The voices out there saying:\n\n> Oh my god, Facebook is so bad, but look at that adorable cat on my best friend's selfie. \n\nshows that it is taking us some time to become the 'social media adults' whose experience engaging in digital connection make them feel the way face-to-face human connection should make them feel: amazing. It can only propel us towards a better social media experience, one whose sprouts may already be out there. I happen to have non-addictive, meaningful and all-in-all a good time discovering music on Soundcloud, looking for a place to crash on and new friends on Couchsurfing.com, and find people with similar interests on Meetup. Maybe it is the focused nature of these sites that takes away Facebook's staleness and subtle mental taxation. Maybe we'll shift more in this focused direction, maybe in a different one, maybe we'll shift trends on what to post, who we friend and what we like on Facebook. Regardless of what the road is, I know that we will be moving for the better. It is not in our nature to stand still when we feel about something the way we do about Facebook.\n\nAnd so, all I want to leave you with is to share with you how stoked I am for the future. Oh, and also a request: be so kind to e-mail me the details of that board game night this coming Saturday. Somehow I missed the last four."},{"id":"playground-1","type":"blog","dates":["2015-08-21"],"name":"Playground 1","group":"personal","title":"Playground 1","headline":"More Projects!","is_live":true,"body_text":"I often feel an internal drive to do things, not just work, but anything technical or creative on the side as a well-rounded, well-researched, well-though-out... let's take a moment here before I bombard you with a rather heavy, mindboggingly overused word: project.\n\nI can't say I am crazy about this overuse. To me, projects carry with them an expectation of completedness, as we juggle around our project deadlines, following the project plan, meeting with the project management team so we can feel good about our project evaluations. But here is the catch that has been on my mind recently: there is a good chance that before the project is complete, we get to a point where we cease to enjoy or grow from doing it. Which really calls for fewer projects.\n\nSo, to steer things in the right direction, what this blog post presents instead are, and indeed you guessed it, projects. This time, however, I am taking the word for its etymological meaning: something I threw (jacere) forth (pro). Pretty casual and open-ended for a change, right? I collected things I did so far that fits into this new, highly personal interpretation: things I did without a pressure to complete or justify, just to show, look and wonder.\n\nHere is my first animated microfilm, an homage to the communist icon vehicle of my native Romania, the Dacia 1100.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MAYWsyDcAPQ\" frameborder=\"0\" allowfullscreen></iframe>\n\nMy second animated microfilm, explorations on a curious brick wall:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mwExBCCFdZw\" frameborder=\"0\" allowfullscreen></iframe>\n\nMy first timelapse, taken while harvesting the kale I grew in Brooklyn:\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/UxzlAk2AgGk\" frameborder=\"0\" allowfullscreen></iframe>\n\nAnd that is about it for a first take! May this post set the scene for many more Playground posts to come."}]